// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     telemetryData.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type ClassificationResult struct {
	Label string `json:"label"`

	Score int32 `json:"score"`

	Ymin int32 `json:"ymin"`

	Ymax int32 `json:"ymax"`

	Xmin int32 `json:"xmin"`

	Xmax int32 `json:"xmax"`
}

const ClassificationResultAvroCRC64Fingerprint = "7Z\x98{.ZtM"

func NewClassificationResult() ClassificationResult {
	r := ClassificationResult{}
	return r
}

func DeserializeClassificationResult(r io.Reader) (ClassificationResult, error) {
	t := NewClassificationResult()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeClassificationResultFromSchema(r io.Reader, schema string) (ClassificationResult, error) {
	t := NewClassificationResult()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeClassificationResult(r ClassificationResult, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Label, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Score, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Ymin, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Ymax, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Xmin, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Xmax, w)
	if err != nil {
		return err
	}
	return err
}

func (r ClassificationResult) Serialize(w io.Writer) error {
	return writeClassificationResult(r, w)
}

func (r ClassificationResult) Schema() string {
	return "{\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"score\",\"type\":\"int\"},{\"name\":\"ymin\",\"type\":\"int\"},{\"name\":\"ymax\",\"type\":\"int\"},{\"name\":\"xmin\",\"type\":\"int\"},{\"name\":\"xmax\",\"type\":\"int\"}],\"name\":\"com.helsing.v1.ClassificationResult\",\"type\":\"record\"}"
}

func (r ClassificationResult) SchemaName() string {
	return "com.helsing.v1.ClassificationResult"
}

func (_ ClassificationResult) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ClassificationResult) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ClassificationResult) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ClassificationResult) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ClassificationResult) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ClassificationResult) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ClassificationResult) SetString(v string)   { panic("Unsupported operation") }
func (_ ClassificationResult) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ClassificationResult) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Label}
	case 1:
		return &types.Int{Target: &r.Score}
	case 2:
		return &types.Int{Target: &r.Ymin}
	case 3:
		return &types.Int{Target: &r.Ymax}
	case 4:
		return &types.Int{Target: &r.Xmin}
	case 5:
		return &types.Int{Target: &r.Xmax}
	}
	panic("Unknown field index")
}

func (r *ClassificationResult) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ClassificationResult) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ ClassificationResult) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ClassificationResult) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ClassificationResult) Finalize()                        {}

func (_ ClassificationResult) AvroCRC64Fingerprint() []byte {
	return []byte(ClassificationResultAvroCRC64Fingerprint)
}

func (r ClassificationResult) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["label"], err = json.Marshal(r.Label)
	if err != nil {
		return nil, err
	}
	output["score"], err = json.Marshal(r.Score)
	if err != nil {
		return nil, err
	}
	output["ymin"], err = json.Marshal(r.Ymin)
	if err != nil {
		return nil, err
	}
	output["ymax"], err = json.Marshal(r.Ymax)
	if err != nil {
		return nil, err
	}
	output["xmin"], err = json.Marshal(r.Xmin)
	if err != nil {
		return nil, err
	}
	output["xmax"], err = json.Marshal(r.Xmax)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ClassificationResult) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["label"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Label); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for label")
	}
	val = func() json.RawMessage {
		if v, ok := fields["score"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Score); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for score")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ymin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ymin); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ymin")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ymax"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ymax); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ymax")
	}
	val = func() json.RawMessage {
		if v, ok := fields["xmin"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Xmin); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for xmin")
	}
	val = func() json.RawMessage {
		if v, ok := fields["xmax"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Xmax); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for xmax")
	}
	return nil
}
