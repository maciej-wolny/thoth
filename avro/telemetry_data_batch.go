// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     telemetryData.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type TelemetryDataBatch struct {
	Size int32 `json:"size"`

	TelemetryDataBatch []TelemetryData `json:"telemetryDataBatch"`
}

const TelemetryDataBatchAvroCRC64Fingerprint = "\xceÌ«[b\x13\xf7\xa0"

func NewTelemetryDataBatch() TelemetryDataBatch {
	r := TelemetryDataBatch{}
	r.TelemetryDataBatch = make([]TelemetryData, 0)

	return r
}

func DeserializeTelemetryDataBatch(r io.Reader) (TelemetryDataBatch, error) {
	t := NewTelemetryDataBatch()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTelemetryDataBatchFromSchema(r io.Reader, schema string) (TelemetryDataBatch, error) {
	t := NewTelemetryDataBatch()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTelemetryDataBatch(r TelemetryDataBatch, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Size, w)
	if err != nil {
		return err
	}
	err = writeArrayTelemetryData(r.TelemetryDataBatch, w)
	if err != nil {
		return err
	}
	return err
}

func (r TelemetryDataBatch) Serialize(w io.Writer) error {
	return writeTelemetryDataBatch(r, w)
}

func (r TelemetryDataBatch) Schema() string {
	return "{\"fields\":[{\"name\":\"size\",\"type\":\"int\"},{\"name\":\"telemetryDataBatch\",\"type\":{\"items\":{\"fields\":[{\"name\":\"timestamp\",\"type\":\"int\"},{\"name\":\"sensorId\",\"type\":\"int\"},{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"objects\",\"type\":{\"items\":{\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"score\",\"type\":\"int\"},{\"name\":\"ymin\",\"type\":\"int\"},{\"name\":\"ymax\",\"type\":\"int\"},{\"name\":\"xmin\",\"type\":\"int\"},{\"name\":\"xmax\",\"type\":\"int\"}],\"name\":\"ClassificationResult\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"TelemetryData\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"com.helsing.v1.TelemetryDataBatch\",\"type\":\"record\"}"
}

func (r TelemetryDataBatch) SchemaName() string {
	return "com.helsing.v1.TelemetryDataBatch"
}

func (_ TelemetryDataBatch) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TelemetryDataBatch) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TelemetryDataBatch) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TelemetryDataBatch) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TelemetryDataBatch) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TelemetryDataBatch) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TelemetryDataBatch) SetString(v string)   { panic("Unsupported operation") }
func (_ TelemetryDataBatch) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TelemetryDataBatch) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Int{Target: &r.Size}
	case 1:
		r.TelemetryDataBatch = make([]TelemetryData, 0)

		return &ArrayTelemetryDataWrapper{Target: &r.TelemetryDataBatch}
	}
	panic("Unknown field index")
}

func (r *TelemetryDataBatch) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *TelemetryDataBatch) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ TelemetryDataBatch) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TelemetryDataBatch) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TelemetryDataBatch) Finalize()                        {}

func (_ TelemetryDataBatch) AvroCRC64Fingerprint() []byte {
	return []byte(TelemetryDataBatchAvroCRC64Fingerprint)
}

func (r TelemetryDataBatch) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["size"], err = json.Marshal(r.Size)
	if err != nil {
		return nil, err
	}
	output["telemetryDataBatch"], err = json.Marshal(r.TelemetryDataBatch)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TelemetryDataBatch) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["size"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Size); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for size")
	}
	val = func() json.RawMessage {
		if v, ok := fields["telemetryDataBatch"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TelemetryDataBatch); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for telemetryDataBatch")
	}
	return nil
}
