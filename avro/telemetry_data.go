// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCE:
 *     telemetryData.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type TelemetryData struct {
	Timestamp int32 `json:"timestamp"`

	SensorId int32 `json:"sensorId"`

	Id int32 `json:"id"`

	Version int32 `json:"version"`

	Objects []ClassificationResult `json:"objects"`
}

const TelemetryDataAvroCRC64Fingerprint = "\xbd#T\x9bH\xa0\xf9\xcd"

func NewTelemetryData() TelemetryData {
	r := TelemetryData{}
	r.Objects = make([]ClassificationResult, 0)

	return r
}

func DeserializeTelemetryData(r io.Reader) (TelemetryData, error) {
	t := NewTelemetryData()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeTelemetryDataFromSchema(r io.Reader, schema string) (TelemetryData, error) {
	t := NewTelemetryData()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeTelemetryData(r TelemetryData, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Timestamp, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.SensorId, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Version, w)
	if err != nil {
		return err
	}
	err = writeArrayClassificationResult(r.Objects, w)
	if err != nil {
		return err
	}
	return err
}

func (r TelemetryData) Serialize(w io.Writer) error {
	return writeTelemetryData(r, w)
}

func (r TelemetryData) Schema() string {
	return "{\"fields\":[{\"name\":\"timestamp\",\"type\":\"int\"},{\"name\":\"sensorId\",\"type\":\"int\"},{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"objects\",\"type\":{\"items\":{\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"score\",\"type\":\"int\"},{\"name\":\"ymin\",\"type\":\"int\"},{\"name\":\"ymax\",\"type\":\"int\"},{\"name\":\"xmin\",\"type\":\"int\"},{\"name\":\"xmax\",\"type\":\"int\"}],\"name\":\"ClassificationResult\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"com.helsing.v1.TelemetryData\",\"type\":\"record\"}"
}

func (r TelemetryData) SchemaName() string {
	return "com.helsing.v1.TelemetryData"
}

func (_ TelemetryData) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ TelemetryData) SetInt(v int32)       { panic("Unsupported operation") }
func (_ TelemetryData) SetLong(v int64)      { panic("Unsupported operation") }
func (_ TelemetryData) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ TelemetryData) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ TelemetryData) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ TelemetryData) SetString(v string)   { panic("Unsupported operation") }
func (_ TelemetryData) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TelemetryData) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Int{Target: &r.Timestamp}
	case 1:
		return &types.Int{Target: &r.SensorId}
	case 2:
		return &types.Int{Target: &r.Id}
	case 3:
		return &types.Int{Target: &r.Version}
	case 4:
		r.Objects = make([]ClassificationResult, 0)

		return &ArrayClassificationResultWrapper{Target: &r.Objects}
	}
	panic("Unknown field index")
}

func (r *TelemetryData) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *TelemetryData) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ TelemetryData) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ TelemetryData) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ TelemetryData) Finalize()                        {}

func (_ TelemetryData) AvroCRC64Fingerprint() []byte {
	return []byte(TelemetryDataAvroCRC64Fingerprint)
}

func (r TelemetryData) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["timestamp"], err = json.Marshal(r.Timestamp)
	if err != nil {
		return nil, err
	}
	output["sensorId"], err = json.Marshal(r.SensorId)
	if err != nil {
		return nil, err
	}
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["version"], err = json.Marshal(r.Version)
	if err != nil {
		return nil, err
	}
	output["objects"], err = json.Marshal(r.Objects)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *TelemetryData) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["timestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Timestamp); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for timestamp")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sensorId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SensorId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sensorId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["version"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Version); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for version")
	}
	val = func() json.RawMessage {
		if v, ok := fields["objects"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Objects); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for objects")
	}
	return nil
}
